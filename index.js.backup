/**
 * LinkedIn Recruitment Automation System
 * Main application entry point
 */
const { app, BrowserWindow } = require('electron');
const path = require('path');
const fs = require('fs');
const config = require('./config/default');

// Add these lines before your window creation to help prevent GPU issues
app.commandLine.appendSwitch('disable-gpu');
app.disableHardwareAcceleration();
// Allow unrestricted script execution:
app.commandLine.appendSwitch('disable-site-isolation-trials');

// Import modules
const { initialize: initializeDataStorage } = require('./modules/data-storage/data-storage');
const LinkedInAutomation = require('./modules/linkedin-automation/linkedin-automation');
const CandidateEvaluationEngine = require('./modules/evaluation-engine/candidate-evaluation-engine');
const { createMessageGenerator } = require('./modules/message-generator');
const WorkflowManager = require('./integration/workflow-manager');
const { setupIpcHandlers } = require('./ipc-handlers');

// Initialize data storage and get integration service
let dataStorage;
let integrationService;

// Initialize all components
async function initializeApplication() {
  try {
    console.log('Initializing application components...');
    
    // Initialize database and data storage
    const storageComponents = await initializeDataStorage();
    dataStorage = storageComponents.dbManager;
    integrationService = storageComponents.integrationService;
    
    // Initialize LinkedIn automation
    const linkedInAutomation = new LinkedInAutomation({
      // Pass configuration options
    });
    
    // Initialize evaluation engine
    const evaluationEngine = new CandidateEvaluationEngine({
      apiKey: config.evaluationEngine.apiKey
    });
    
    // Initialize message generator
    const messageGenerator = createMessageGenerator({
      templatesDir: path.join(__dirname, 'modules/message-generator/templates')
    });
    
    // Initialize workflow manager to connect all components
    const workflowManager = new WorkflowManager({
      dataStorage: integrationService,
      linkedInAutomation,
      evaluationEngine,
      messageGenerator
    });
    
    console.log('All components initialized successfully');
    return { dataStorage, integrationService, workflowManager };
  } catch (error) {
    console.error('Failed to initialize application:', error);
    throw error;
  }
}

// Create main application window
function createWindow() {
  console.log('Creating main application window...');
  console.log('__dirname:', __dirname);
  
  // Check key directories and files
  const directoriesToCheck = [
    'modules/ui',
    'modules/ui/build',
    'modules/ui/electron',
    'electron-app'
  ];
  
  directoriesToCheck.forEach(dir => {
    const fullPath = path.join(__dirname, dir);
    if (fs.existsSync(fullPath)) {
      console.log(`✅ ${dir} directory exists`);
      console.log(`Contents of ${dir}:`, fs.readdirSync(fullPath));
    } else {
      console.log(`❌ ${dir} directory does not exist`);
    }
  });
  
  // Check for preload files at various locations
  const preloadPaths = [
    path.join(__dirname, 'robust-preload.js'), // Our new primary preload script
    path.join(__dirname, 'preload.js'),
    path.join(__dirname, 'electron-app/preload.js'),
    path.join(__dirname, 'modules/ui/electron/preload.js')
  ];
  
  let availablePreloadPath = null;
  
  preloadPaths.forEach(p => {
    const exists = fs.existsSync(p);
    console.log(`Checking preload at ${p}: ${exists ? '✅ EXISTS' : '❌ NOT FOUND'}`);
    if (exists && !availablePreloadPath) {
      availablePreloadPath = p;
    }
  });
  
  // Make sure we have a valid preload path
  if (!availablePreloadPath) {
    console.error('No valid preload script found! Cannot proceed.');
    throw new Error('No valid preload script found');
  }
  
  console.log('Using preload path:', availablePreloadPath);
  
  // Create the browser window
  const mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      preload: path.join(__dirname, 'robust-preload.js'), // Use the new robust preload script
      nodeIntegration: false,
      contextIsolation: true,
      webSecurity: false,
      sandbox: false, // Disable sandbox for full preload functionality
      enableRemoteModule: false
    }
  });

  // Add detailed event handlers for diagnosing loading issues
  mainWindow.webContents.on('did-start-loading', () => {
    console.log('WebContents: Started loading');
  });
  
  mainWindow.webContents.on('did-finish-load', () => {
    console.log('WebContents: Finished loading');
    
    // Execute test script to verify DOM content
    mainWindow.webContents.executeJavaScript(`
      console.log('-----DOM INSPECTION-----');
      console.log('document.title:', document.title);
      console.log('Root element exists:', !!document.getElementById('root'));
      console.log('Script tags count:', document.querySelectorAll('script').length);
      console.log('Body HTML snippet:', document.body.innerHTML.substring(0, 200) + '...');
      console.log('window.api available:', !!window.api);
      
      // Test the API functions directly
      if (window.api) {
        console.log('API methods:', Object.keys(window.api));
        
        // Test a simple API function
        if (window.api.getAppVersion) {
          console.log('Testing getAppVersion...');
          window.api.getAppVersion()
            .then(version => console.log('App version:', version))
            .catch(err => console.error('getAppVersion error:', err));
        }
        
        // Test LinkedIn browser function
        if (window.api.startLinkedInBrowser) {
          console.log('startLinkedInBrowser function is available');
          // Don't actually call it here, just verify it exists
        } else {
          console.error('startLinkedInBrowser function is NOT available!');
        }
      }
    `)
    .catch(err => console.error('Error executing JavaScript in renderer:', err));
  });
  
  mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDesc) => {
    console.error('WebContents: Failed to load', errorCode, errorDesc);
  });
  
  mainWindow.webContents.on('dom-ready', () => {
    console.log('WebContents: DOM is ready');
    
    // Check for API availability
    mainWindow.webContents.executeJavaScript(`
      console.log("DOM ready, window.api:", window.api ? "Available" : "Not available");
      if (window.api) console.log("API methods:", Object.keys(window.api));
    `)
    .catch(err => console.error('Error checking API availability:', err));
  });
  
  mainWindow.webContents.on('crashed', () => {
    console.error('WebContents has crashed!');
  });
  
  mainWindow.on('unresponsive', () => {
    console.error('Window has become unresponsive');
  });
  
  // Load the React app
  const isDev = process.env.NODE_ENV === 'development';
  console.log('Environment:', isDev ? 'Development' : 'Production');
  
  if (isDev) {
    // Development mode - load from React dev server
    console.log('Loading from development server at http://localhost:3000');
    mainWindow.loadURL('http://localhost:3000')
      .catch(err => console.error('Failed to load from dev server:', err));
  } else {
    // Production mode - load from build directory
    try {
      const htmlPath = path.resolve(__dirname, 'modules/ui/build/index.html');
      console.log('Checking build path:', htmlPath);
      
      if (!fs.existsSync(htmlPath)) {
        console.error('Build file does not exist!');
        // Create a simple error page
        const errorHtml = `
          <!DOCTYPE html>
          <html>
            <head><title>Error</title></head>
            <body>
              <h1>Build File Not Found</h1>
              <p>The build file at ${htmlPath} does not exist.</p>
              <p>Please run 'npm run build' in the modules/ui directory.</p>
            </body>
          </html>
        `;
        const errorPath = path.join(__dirname, 'error.html');
        fs.writeFileSync(errorPath, errorHtml);
        mainWindow.loadFile(errorPath);
        return;
      }
      
      // Check build directory for required files
      const buildDir = path.dirname(htmlPath);
      console.log('Build directory contents:', fs.readdirSync(buildDir));
      
      const staticDir = path.join(buildDir, 'static');
      if (fs.existsSync(staticDir)) {
        console.log('Static directory exists, contains:', fs.readdirSync(staticDir));
        
        const jsDir = path.join(staticDir, 'js');
        if (fs.existsSync(jsDir)) {
          console.log('JS directory exists, contains:', fs.readdirSync(jsDir));
        } else {
          console.error('JS directory not found!');
        }
        
        const cssDir = path.join(staticDir, 'css');
        if (fs.existsSync(cssDir)) {
          console.log('CSS directory exists, contains:', fs.readdirSync(cssDir));
        } else {
          console.error('CSS directory not found!');
        }
      } else {
        console.error('Static directory not found!');
      }
      
      // Load the React application
      const reactAppPath = path.resolve(__dirname, 'modules/ui/build/index.html');
      console.log('Loading React application from:', reactAppPath);
      
      if (fs.existsSync(reactAppPath)) {
        mainWindow.loadFile(reactAppPath)
          .then(() => {
            console.log('React app loaded successfully');
            
            // Inject our debugging and patch scripts
            const globalDebuggerPath = path.join(__dirname, 'global-debugger.js');
            if (fs.existsSync(globalDebuggerPath)) {
              const globalDebuggerScript = fs.readFileSync(globalDebuggerPath, 'utf8');
              mainWindow.webContents.executeJavaScript(globalDebuggerScript)
                .then(() => console.log('Global debugger script injected successfully'))
                .catch(err => console.error('Error injecting global debugger script:', err));
            }
            
            // Add direct logout functionality
            const directLogoutPath = path.join(__dirname, 'direct-logout.js');
            if (fs.existsSync(directLogoutPath)) {
              const directLogoutScript = fs.readFileSync(directLogoutPath, 'utf8');
              mainWindow.webContents.executeJavaScript(directLogoutScript)
                .then(() => console.log('Direct logout script injected successfully'))
                .catch(err => console.error('Error injecting direct logout script:', err));
            }
            
            // Add DOM injector for direct UI controls
            const domInjectorPath = path.join(__dirname, 'dom-injector.js');
            if (fs.existsSync(domInjectorPath)) {
              const domInjectorScript = fs.readFileSync(domInjectorPath, 'utf8');
              mainWindow.webContents.executeJavaScript(domInjectorScript)
                .then(() => console.log('DOM injector script injected successfully'))
                .catch(err => console.error('Error injecting DOM injector script:', err));
            }
            
            // Add event interceptor for low-level event handling
            const eventInterceptorPath = path.join(__dirname, 'event-interceptor.js');
            if (fs.existsSync(eventInterceptorPath)) {
              const eventInterceptorScript = fs.readFileSync(eventInterceptorPath, 'utf8');
              mainWindow.webContents.executeJavaScript(eventInterceptorScript)
                .then(() => console.log('Event interceptor script injected successfully'))
                .catch(err => console.error('Error injecting event interceptor script:', err));
            }
            
            // Add button fixer with MutationObserver to ensure buttons work
            const buttonFixerPath = path.join(__dirname, 'button-fixer.js');
            if (fs.existsSync(buttonFixerPath)) {
              const buttonFixerScript = fs.readFileSync(buttonFixerPath, 'utf8');
              mainWindow.webContents.executeJavaScript(buttonFixerScript)
                .then(() => console.log('Button fixer script injected successfully'))
                .catch(err => console.error('Error injecting button fixer script:', err));
            }
            
            // Add our navigation fix to resolve all navigation issues
            const navigationFixPath = path.join(__dirname, 'navigation-fix.js');
            if (fs.existsSync(navigationFixPath)) {
              const navigationFixScript = fs.readFileSync(navigationFixPath, 'utf8');
              mainWindow.webContents.executeJavaScript(navigationFixScript)
                .then(() => console.log('Navigation fix script injected successfully'))
                .catch(err => console.error('Error injecting navigation fix script:', err));
            }
            
            // Add navigation debug tools to help verify functionality
            const navigationDebugPath = path.join(__dirname, 'navigation-debug.js');
            if (fs.existsSync(navigationDebugPath)) {
              const navigationDebugScript = fs.readFileSync(navigationDebugPath, 'utf8');
              mainWindow.webContents.executeJavaScript(navigationDebugScript)
                .then(() => console.log('Navigation debug script injected successfully'))
                .catch(err => console.error('Error injecting navigation debug script:', err));
            }
            
            // Add our clean architecture fix to resolve all navigation issues properly
            const cleanArchitecturePath = path.join(__dirname, 'clean-architecture-fix.js');
            if (fs.existsSync(cleanArchitecturePath)) {
              const cleanArchitectureScript = fs.readFileSync(cleanArchitecturePath, 'utf8');
              mainWindow.webContents.executeJavaScript(cleanArchitectureScript)
                .then(() => console.log('Clean architecture fix injected successfully'))
                .catch(err => console.error('Error injecting clean architecture fix:', err));
            }
            
            // Add a basic global window.logout function as fallback
            mainWindow.webContents.executeJavaScript(`
              // Define a global logout function that can be called from anywhere
              window.logout = function() {
                console.log("Global logout function called");
                if (window.api && window.api.clearCredentials) {
                  window.api.clearCredentials()
                    .then(function() {
                      window.location.href = '#/login';
                      window.location.reload();
                    })
                    .catch(function(err) {
                      console.error("Logout error:", err);
                      window.location.href = '#/login';
                      window.location.reload();
                    });
                } else {
                  window.location.href = '#/login';
                  window.location.reload();
                }
              };
              
              // Expose a direct API accessor as fallback
              window.directApi = window.api;
              
              console.log("Global logout function and directApi installed");
            `)
            .catch(err => console.error('Error adding global logout function:', err));
            
            // Add extra event listeners to find and handle logout elements
            mainWindow.webContents.executeJavaScript(`
              // Find elements containing logout text
              setTimeout(() => {
                const logoutElements = Array.from(document.querySelectorAll('*')).filter(el => 
                  el.innerText && el.innerText.toLowerCase().includes('logout'));
                
                console.log('Found', logoutElements.length, 'elements containing "logout" text');
                
                logoutElements.forEach((el, i) => {
                  console.log('Logout element', i, ':', 
                    el.tagName, 
                    el.id ? '#' + el.id : '',
                    Array.from(el.classList).map(c => '.' + c).join(' '),
                    'contains button:', !!el.querySelector('button'));
                  
                  // Add direct click handler to element and its button children
                  el.addEventListener('click', (e) => {
                    console.log('Direct click on logout-containing element', i);
                    
                    // If window.api exists, try direct logout
                    if (window.api && window.api.clearCredentials) {
                      console.log('Attempting direct API logout');
                      window.api.clearCredentials()
                        .then(res => {
                          console.log('Direct logout result:', res);
                          setTimeout(() => window.location.reload(), 1000);
                        })
                        .catch(err => console.error('Direct logout error:', err));
                    }
                  });
                  
                  // Also add to any buttons inside
                  const buttons = el.querySelectorAll('button');
                  buttons.forEach(btn => {
                    btn.addEventListener('click', () => {
                      console.log('Direct click on button inside logout element', i);
                    });
                  });
                });
              }, 3000);
            `)
            .catch(err => console.error('Error adding event debugging:', err));
          })
          .catch(err => {
            console.error('Error loading React app:', err);
          });
      } else {
        console.error('React app HTML not found at:', reactAppPath);
      }
    } catch (err) {
      console.error('Critical error during window creation:', err);
    }
  }

  // Open DevTools for debugging
  mainWindow.webContents.openDevTools();
  
  return mainWindow;
}

// Electron app events
app.whenReady().then(async () => {
  try {
    console.log('Electron app is ready');
    
    // Initialize modules
    const { workflowManager } = await initializeApplication();
    
    // Create UI window
    const mainWindow = createWindow();
    
    // Set up IPC handlers with event forwarding
    console.log('Setting up IPC handlers...');
    try {
      const enhancedHandlers = require('./enhanced-ipc-handlers');
      console.log('Using enhanced IPC handlers');
      enhancedHandlers.setupIpcHandlers(workflowManager);
    } catch (ipcError) {
      console.error('Failed to load enhanced IPC handlers, falling back to basic:', ipcError);
      setupIpcHandlers(workflowManager, mainWindow);
    }
    
    // Expose integration APIs to the UI via preload script
    global.workflowManager = workflowManager;
  } catch (error) {
    console.error('Application initialization failed:', error);
    app.quit();
  }
});

app.on('window-all-closed', () => {
  console.log('All windows closed');
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  console.log('App activated');
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on('quit', () => {
  console.log('App quitting');
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught exception in main process:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled rejection in main process:', reason);
});